#include "stm32f0xx.h"
#include "stm32f0_discovery.h"





static void nano_wait(int t) {
    asm("       mov r0,%0\n"
        "repeat:\n"
        "       sub r0,#83\n"
        "       bgt repeat\n"
        : : "r"(t) : "r0", "cc");
}

void btn_init() {
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
	GPIOB->MODER &= ~(3<<(2*3) | 3<<(2*4)); //clear
	GPIOB->PUPDR &= ~(3<<(2*3) | 3<<(2*4));
	GPIOB->PUPDR |= (2<<(2*3) | 2<<(2*4));

}


void usart2_init(void) {
	//pins
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
	GPIOA->MODER &= ~(3<<(2*2) | 3<<(2*3)); //clear
	GPIOA->MODER |= 2<<(2*2) | 2<<(2*3); //set alt.
	GPIOA->AFR[0] &= ~(0xF <<(4*2) | 0xF<<(4*3));
	GPIOA->AFR[0] |= (1 <<(4*2) | 1 <<(4*(3))); //set to tx/rx

	//set up USART2
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
	USART2->CR1 &= ~(1<<28 | USART_CR1_OVER8 | USART_CR1_PCE); //set to 8 bit, 16x samp., parity off
	USART2->CR2 &= ~(USART_CR2_STOP); //1 stop bit
	//USART1->BRR = 20000; //0x4e20
	USART2->BRR = 48000000/9600;

	//enables
	USART2->CR1 |= USART_CR1_RE | USART_CR1_TE |USART_CR1_UE;
	while((USART2->ISR & USART_ISR_REACK) == 0);
	while((USART2->ISR & USART_ISR_TEACK) == 0);
}

void swrite(char c) {
	while((USART2->ISR & USART_ISR_TXE) != USART_ISR_TXE);
	USART2->TDR = c;
	//USART1->CR1
}

char sread(void) {
	while((USART2->ISR & USART_ISR_RXNE) != USART_ISR_RXNE); //wait until equal
	char c = USART2->RDR;
	return c;
}

int main(void)
{
	btn_init();
	usart2_init();

	char led1 = 0;
	char led2 = 0;
	char addr1 = 1<<4;
	char addr2 = 2<<4;
	for(;;) {
		if(GPIOB->IDR & (1<<3)) { //left button
			if(led1) {
				led1 = 0;
				swrite(addr1|led1);
			} else {
					led1 = 1;
					swrite(addr1|led1);
			}
		}
	}
}
